/*
 * Marketing API v.1.0
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * OpenAPI spec version: v.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.marketing.api;

import com.criteo.marketing.ApiCallback;
import com.criteo.marketing.ApiClient;
import com.criteo.marketing.ApiException;
import com.criteo.marketing.ApiResponse;
import com.criteo.marketing.Configuration;
import com.criteo.marketing.Pair;
import com.criteo.marketing.ProgressRequestBody;
import com.criteo.marketing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.marketing.model.CreateSellerBudgetMapiMessage;
import com.criteo.marketing.model.MessageWithDetailsIListErrorResponse;
import java.time.OffsetDateTime;
import com.criteo.marketing.model.SellerBase;
import com.criteo.marketing.model.SellerBudgetMessage;
import com.criteo.marketing.model.SellerCampaignBase;
import com.criteo.marketing.model.SellerCampaignMessage;
import com.criteo.marketing.model.UpdateSellerBudgetMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SellersV2Api {
    private ApiClient apiClient;

    public SellersV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public SellersV2Api(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for createSellerBudgets
     * @param authorization JWT Bearer Token (required)
     * @param createSellerBudgets  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call createSellerBudgetsCall(String authorization, List<CreateSellerBudgetMapiMessage> createSellerBudgets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = createSellerBudgets;

        // create path and map variables
        String localVarPath = "/v2/crp/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSellerBudgetsValidateBeforeCall(String authorization, List<CreateSellerBudgetMapiMessage> createSellerBudgets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createSellerBudgets(Async)");
        }
        
        // verify the required parameter 'createSellerBudgets' is set
        if (createSellerBudgets == null) {
            throw new ApiException("Missing the required parameter 'createSellerBudgets' when calling createSellerBudgets(Async)");
        }
        

        okhttp3.Call call = createSellerBudgetsCall(authorization, createSellerBudgets, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param createSellerBudgets  (required)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBudgetMessage> createSellerBudgets(String authorization, List<CreateSellerBudgetMapiMessage> createSellerBudgets) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> resp = createSellerBudgetsWithHttpInfo(authorization, createSellerBudgets);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param createSellerBudgets  (required)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBudgetMessage>> createSellerBudgetsWithHttpInfo(String authorization, List<CreateSellerBudgetMapiMessage> createSellerBudgets) throws ApiException {
        okhttp3.Call call = createSellerBudgetsValidateBeforeCall(authorization, createSellerBudgets, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization JWT Bearer Token (required)
     * @param createSellerBudgets  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call createSellerBudgetsAsync(String authorization, List<CreateSellerBudgetMapiMessage> createSellerBudgets, final ApiCallback<List<SellerBudgetMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = createSellerBudgetsValidateBeforeCall(authorization, createSellerBudgets, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBudgetsBySeller
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getBudgetsBySellerCall(Long sellerId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/sellers/{sellerId}/budgets"
            .replaceAll("\\{" + "sellerId" + "\\}", apiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withSpend", withSpend));
        }

        if (endAfterDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBudgetsBySellerValidateBeforeCall(Long sellerId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getBudgetsBySeller(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBudgetsBySeller(Async)");
        }
        

        okhttp3.Call call = getBudgetsBySellerCall(sellerId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBudgetMessage> getBudgetsBySeller(Long sellerId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> resp = getBudgetsBySellerWithHttpInfo(sellerId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBudgetMessage>> getBudgetsBySellerWithHttpInfo(Long sellerId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId) throws ApiException {
        okhttp3.Call call = getBudgetsBySellerValidateBeforeCall(sellerId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getBudgetsBySellerAsync(Long sellerId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, final ApiCallback<List<SellerBudgetMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getBudgetsBySellerValidateBeforeCall(sellerId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getBudgetsBySellerCampaignId
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getBudgetsBySellerCampaignIdCall(String sellerCampaignId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/seller-campaigns/{sellerCampaignId}/budgets"
            .replaceAll("\\{" + "sellerCampaignId" + "\\}", apiClient.escapeString(sellerCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withSpend", withSpend));
        }

        if (endAfterDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getBudgetsBySellerCampaignIdValidateBeforeCall(String sellerCampaignId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sellerCampaignId' is set
        if (sellerCampaignId == null) {
            throw new ApiException("Missing the required parameter 'sellerCampaignId' when calling getBudgetsBySellerCampaignId(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getBudgetsBySellerCampaignId(Async)");
        }
        

        okhttp3.Call call = getBudgetsBySellerCampaignIdCall(sellerCampaignId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBudgetMessage> getBudgetsBySellerCampaignId(String sellerCampaignId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> resp = getBudgetsBySellerCampaignIdWithHttpInfo(sellerCampaignId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBudgetMessage>> getBudgetsBySellerCampaignIdWithHttpInfo(String sellerCampaignId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate) throws ApiException {
        okhttp3.Call call = getBudgetsBySellerCampaignIdValidateBeforeCall(sellerCampaignId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getBudgetsBySellerCampaignIdAsync(String sellerCampaignId, String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, final ApiCallback<List<SellerBudgetMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getBudgetsBySellerCampaignIdValidateBeforeCall(sellerCampaignId, authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSeller
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellerCall(Long sellerId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/sellers/{sellerId}"
            .replaceAll("\\{" + "sellerId" + "\\}", apiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerValidateBeforeCall(Long sellerId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getSeller(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSeller(Async)");
        }
        

        okhttp3.Call call = getSellerCall(sellerId, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @return SellerBase
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SellerBase getSeller(Long sellerId, String authorization) throws ApiException {
        ApiResponse<SellerBase> resp = getSellerWithHttpInfo(sellerId, authorization);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @return ApiResponse&lt;SellerBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SellerBase> getSellerWithHttpInfo(Long sellerId, String authorization) throws ApiException {
        okhttp3.Call call = getSellerValidateBeforeCall(sellerId, authorization, null, null);
        Type localVarReturnType = new TypeToken<SellerBase>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellerAsync(Long sellerId, String authorization, final ApiCallback<SellerBase> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellerValidateBeforeCall(sellerId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SellerBase>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSellerBudget
     * @param budgetId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellerBudgetCall(Long budgetId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/budgets/{budgetId}"
            .replaceAll("\\{" + "budgetId" + "\\}", apiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerBudgetValidateBeforeCall(Long budgetId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling getSellerBudget(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSellerBudget(Async)");
        }
        

        okhttp3.Call call = getSellerBudgetCall(budgetId, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param budgetId  (required)
     * @param authorization JWT Bearer Token (required)
     * @return SellerBudgetMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SellerBudgetMessage getSellerBudget(Long budgetId, String authorization) throws ApiException {
        ApiResponse<SellerBudgetMessage> resp = getSellerBudgetWithHttpInfo(budgetId, authorization);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param budgetId  (required)
     * @param authorization JWT Bearer Token (required)
     * @return ApiResponse&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SellerBudgetMessage> getSellerBudgetWithHttpInfo(Long budgetId, String authorization) throws ApiException {
        okhttp3.Call call = getSellerBudgetValidateBeforeCall(budgetId, authorization, null, null);
        Type localVarReturnType = new TypeToken<SellerBudgetMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param budgetId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellerBudgetAsync(Long budgetId, String authorization, final ApiCallback<SellerBudgetMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellerBudgetValidateBeforeCall(budgetId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SellerBudgetMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSellerBudgets
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @param sellerId  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellerBudgetsCall(String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, Long sellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (withBalance != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withBalance", withBalance));
        }

        if (withSpend != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withSpend", withSpend));
        }

        if (endAfterDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endAfterDate", endAfterDate));
        }

        if (startBeforeDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startBeforeDate", startBeforeDate));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sellerId", sellerId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerBudgetsValidateBeforeCall(String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, Long sellerId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSellerBudgets(Async)");
        }
        

        okhttp3.Call call = getSellerBudgetsCall(authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, sellerId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @param sellerId  (optional)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBudgetMessage> getSellerBudgets(String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, Long sellerId) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> resp = getSellerBudgetsWithHttpInfo(authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, sellerId);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @param sellerId  (optional)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBudgetMessage>> getSellerBudgetsWithHttpInfo(String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, Long sellerId) throws ApiException {
        okhttp3.Call call = getSellerBudgetsValidateBeforeCall(authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, sellerId, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization JWT Bearer Token (required)
     * @param status  (optional)
     * @param withBalance  (optional)
     * @param withSpend  (optional)
     * @param endAfterDate  (optional)
     * @param startBeforeDate  (optional)
     * @param campaignId  (optional)
     * @param sellerId  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellerBudgetsAsync(String authorization, String status, Boolean withBalance, Boolean withSpend, OffsetDateTime endAfterDate, OffsetDateTime startBeforeDate, Integer campaignId, Long sellerId, final ApiCallback<List<SellerBudgetMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellerBudgetsValidateBeforeCall(authorization, status, withBalance, withSpend, endAfterDate, startBeforeDate, campaignId, sellerId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSellerCampaign
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellerCampaignCall(String sellerCampaignId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/seller-campaigns/{sellerCampaignId}"
            .replaceAll("\\{" + "sellerCampaignId" + "\\}", apiClient.escapeString(sellerCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerCampaignValidateBeforeCall(String sellerCampaignId, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sellerCampaignId' is set
        if (sellerCampaignId == null) {
            throw new ApiException("Missing the required parameter 'sellerCampaignId' when calling getSellerCampaign(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSellerCampaign(Async)");
        }
        

        okhttp3.Call call = getSellerCampaignCall(sellerCampaignId, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @return SellerCampaignMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SellerCampaignMessage getSellerCampaign(String sellerCampaignId, String authorization) throws ApiException {
        ApiResponse<SellerCampaignMessage> resp = getSellerCampaignWithHttpInfo(sellerCampaignId, authorization);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @return ApiResponse&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SellerCampaignMessage> getSellerCampaignWithHttpInfo(String sellerCampaignId, String authorization) throws ApiException {
        okhttp3.Call call = getSellerCampaignValidateBeforeCall(sellerCampaignId, authorization, null, null);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sellerCampaignId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellerCampaignAsync(String sellerCampaignId, String authorization, final ApiCallback<SellerCampaignMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellerCampaignValidateBeforeCall(sellerCampaignId, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSellerCampaigns
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param sellerId  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellerCampaignsCall(String authorization, String sellerStatus, Long sellerId, Integer campaignId, String budgetStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/seller-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sellerStatus", sellerStatus));
        }

        if (sellerId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sellerId", sellerId));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        if (budgetStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("budgetStatus", budgetStatus));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerCampaignsValidateBeforeCall(String authorization, String sellerStatus, Long sellerId, Integer campaignId, String budgetStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSellerCampaigns(Async)");
        }
        

        okhttp3.Call call = getSellerCampaignsCall(authorization, sellerStatus, sellerId, campaignId, budgetStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param sellerId  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @return List&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerCampaignMessage> getSellerCampaigns(String authorization, String sellerStatus, Long sellerId, Integer campaignId, String budgetStatus) throws ApiException {
        ApiResponse<List<SellerCampaignMessage>> resp = getSellerCampaignsWithHttpInfo(authorization, sellerStatus, sellerId, campaignId, budgetStatus);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param sellerId  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @return ApiResponse&lt;List&lt;SellerCampaignMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerCampaignMessage>> getSellerCampaignsWithHttpInfo(String authorization, String sellerStatus, Long sellerId, Integer campaignId, String budgetStatus) throws ApiException {
        okhttp3.Call call = getSellerCampaignsValidateBeforeCall(authorization, sellerStatus, sellerId, campaignId, budgetStatus, null, null);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param sellerId  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellerCampaignsAsync(String authorization, String sellerStatus, Long sellerId, Integer campaignId, String budgetStatus, final ApiCallback<List<SellerCampaignMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellerCampaignsValidateBeforeCall(authorization, sellerStatus, sellerId, campaignId, budgetStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSellerCampaignsBySeller
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellerCampaignsBySellerCall(Long sellerId, String authorization, String sellerStatus, Integer campaignId, String budgetStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/sellers/{sellerId}/seller-campaigns"
            .replaceAll("\\{" + "sellerId" + "\\}", apiClient.escapeString(sellerId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sellerStatus", sellerStatus));
        }

        if (campaignId != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("campaignId", campaignId));
        }

        if (budgetStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("budgetStatus", budgetStatus));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellerCampaignsBySellerValidateBeforeCall(Long sellerId, String authorization, String sellerStatus, Integer campaignId, String budgetStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sellerId' is set
        if (sellerId == null) {
            throw new ApiException("Missing the required parameter 'sellerId' when calling getSellerCampaignsBySeller(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSellerCampaignsBySeller(Async)");
        }
        

        okhttp3.Call call = getSellerCampaignsBySellerCall(sellerId, authorization, sellerStatus, campaignId, budgetStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @return List&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerCampaignMessage> getSellerCampaignsBySeller(Long sellerId, String authorization, String sellerStatus, Integer campaignId, String budgetStatus) throws ApiException {
        ApiResponse<List<SellerCampaignMessage>> resp = getSellerCampaignsBySellerWithHttpInfo(sellerId, authorization, sellerStatus, campaignId, budgetStatus);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @return ApiResponse&lt;List&lt;SellerCampaignMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerCampaignMessage>> getSellerCampaignsBySellerWithHttpInfo(Long sellerId, String authorization, String sellerStatus, Integer campaignId, String budgetStatus) throws ApiException {
        okhttp3.Call call = getSellerCampaignsBySellerValidateBeforeCall(sellerId, authorization, sellerStatus, campaignId, budgetStatus, null, null);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sellerId  (required)
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param campaignId  (optional)
     * @param budgetStatus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellerCampaignsBySellerAsync(Long sellerId, String authorization, String sellerStatus, Integer campaignId, String budgetStatus, final ApiCallback<List<SellerCampaignMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellerCampaignsBySellerValidateBeforeCall(sellerId, authorization, sellerStatus, campaignId, budgetStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getSellers
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param withProducts  (optional)
     * @param withBudgetStatus  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call getSellersCall(String authorization, String sellerStatus, Boolean withProducts, String withBudgetStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (sellerStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("sellerStatus", sellerStatus));
        }

        if (withProducts != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withProducts", withProducts));
        }

        if (withBudgetStatus != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("withBudgetStatus", withBudgetStatus));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSellersValidateBeforeCall(String authorization, String sellerStatus, Boolean withProducts, String withBudgetStatus, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getSellers(Async)");
        }
        

        okhttp3.Call call = getSellersCall(authorization, sellerStatus, withProducts, withBudgetStatus, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param withProducts  (optional)
     * @param withBudgetStatus  (optional)
     * @return List&lt;SellerBase&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBase> getSellers(String authorization, String sellerStatus, Boolean withProducts, String withBudgetStatus) throws ApiException {
        ApiResponse<List<SellerBase>> resp = getSellersWithHttpInfo(authorization, sellerStatus, withProducts, withBudgetStatus);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param withProducts  (optional)
     * @param withBudgetStatus  (optional)
     * @return ApiResponse&lt;List&lt;SellerBase&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBase>> getSellersWithHttpInfo(String authorization, String sellerStatus, Boolean withProducts, String withBudgetStatus) throws ApiException {
        okhttp3.Call call = getSellersValidateBeforeCall(authorization, sellerStatus, withProducts, withBudgetStatus, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBase>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization JWT Bearer Token (required)
     * @param sellerStatus  (optional)
     * @param withProducts  (optional)
     * @param withBudgetStatus  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call getSellersAsync(String authorization, String sellerStatus, Boolean withProducts, String withBudgetStatus, final ApiCallback<List<SellerBase>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = getSellersValidateBeforeCall(authorization, sellerStatus, withProducts, withBudgetStatus, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBase>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSellerBudget
     * @param budgetId  (required)
     * @param startDate  (required)
     * @param status  (required)
     * @param amount  (required)
     * @param endDate  (required)
     * @param authorization JWT Bearer Token (required)
     * @param campaignIds  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateSellerBudgetCall(Long budgetId, OffsetDateTime startDate, String status, String amount, String endDate, String authorization, List<Integer> campaignIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaignIds;

        // create path and map variables
        String localVarPath = "/v2/crp/budgets/{budgetId}"
            .replaceAll("\\{" + "budgetId" + "\\}", apiClient.escapeString(budgetId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (startDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        }

        if (status != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("status", status));
        }

        if (amount != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("amount", amount));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSellerBudgetValidateBeforeCall(Long budgetId, OffsetDateTime startDate, String status, String amount, String endDate, String authorization, List<Integer> campaignIds, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'budgetId' is set
        if (budgetId == null) {
            throw new ApiException("Missing the required parameter 'budgetId' when calling updateSellerBudget(Async)");
        }
        
        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling updateSellerBudget(Async)");
        }
        
        // verify the required parameter 'status' is set
        if (status == null) {
            throw new ApiException("Missing the required parameter 'status' when calling updateSellerBudget(Async)");
        }
        
        // verify the required parameter 'amount' is set
        if (amount == null) {
            throw new ApiException("Missing the required parameter 'amount' when calling updateSellerBudget(Async)");
        }
        
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling updateSellerBudget(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateSellerBudget(Async)");
        }
        
        // verify the required parameter 'campaignIds' is set
        if (campaignIds == null) {
            throw new ApiException("Missing the required parameter 'campaignIds' when calling updateSellerBudget(Async)");
        }
        

        okhttp3.Call call = updateSellerBudgetCall(budgetId, startDate, status, amount, endDate, authorization, campaignIds, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param budgetId  (required)
     * @param startDate  (required)
     * @param status  (required)
     * @param amount  (required)
     * @param endDate  (required)
     * @param authorization JWT Bearer Token (required)
     * @param campaignIds  (required)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBudgetMessage> updateSellerBudget(Long budgetId, OffsetDateTime startDate, String status, String amount, String endDate, String authorization, List<Integer> campaignIds) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> resp = updateSellerBudgetWithHttpInfo(budgetId, startDate, status, amount, endDate, authorization, campaignIds);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param budgetId  (required)
     * @param startDate  (required)
     * @param status  (required)
     * @param amount  (required)
     * @param endDate  (required)
     * @param authorization JWT Bearer Token (required)
     * @param campaignIds  (required)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBudgetMessage>> updateSellerBudgetWithHttpInfo(Long budgetId, OffsetDateTime startDate, String status, String amount, String endDate, String authorization, List<Integer> campaignIds) throws ApiException {
        okhttp3.Call call = updateSellerBudgetValidateBeforeCall(budgetId, startDate, status, amount, endDate, authorization, campaignIds, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param budgetId  (required)
     * @param startDate  (required)
     * @param status  (required)
     * @param amount  (required)
     * @param endDate  (required)
     * @param authorization JWT Bearer Token (required)
     * @param campaignIds  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateSellerBudgetAsync(Long budgetId, OffsetDateTime startDate, String status, String amount, String endDate, String authorization, List<Integer> campaignIds, final ApiCallback<List<SellerBudgetMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateSellerBudgetValidateBeforeCall(budgetId, startDate, status, amount, endDate, authorization, campaignIds, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSellerBudgets
     * @param authorization JWT Bearer Token (required)
     * @param updateSellerBudgets  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateSellerBudgetsCall(String authorization, List<UpdateSellerBudgetMessage> updateSellerBudgets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = updateSellerBudgets;

        // create path and map variables
        String localVarPath = "/v2/crp/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSellerBudgetsValidateBeforeCall(String authorization, List<UpdateSellerBudgetMessage> updateSellerBudgets, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateSellerBudgets(Async)");
        }
        
        // verify the required parameter 'updateSellerBudgets' is set
        if (updateSellerBudgets == null) {
            throw new ApiException("Missing the required parameter 'updateSellerBudgets' when calling updateSellerBudgets(Async)");
        }
        

        okhttp3.Call call = updateSellerBudgetsCall(authorization, updateSellerBudgets, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param updateSellerBudgets  (required)
     * @return List&lt;SellerBudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerBudgetMessage> updateSellerBudgets(String authorization, List<UpdateSellerBudgetMessage> updateSellerBudgets) throws ApiException {
        ApiResponse<List<SellerBudgetMessage>> resp = updateSellerBudgetsWithHttpInfo(authorization, updateSellerBudgets);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param updateSellerBudgets  (required)
     * @return ApiResponse&lt;List&lt;SellerBudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerBudgetMessage>> updateSellerBudgetsWithHttpInfo(String authorization, List<UpdateSellerBudgetMessage> updateSellerBudgets) throws ApiException {
        okhttp3.Call call = updateSellerBudgetsValidateBeforeCall(authorization, updateSellerBudgets, null, null);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization JWT Bearer Token (required)
     * @param updateSellerBudgets  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateSellerBudgetsAsync(String authorization, List<UpdateSellerBudgetMessage> updateSellerBudgets, final ApiCallback<List<SellerBudgetMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateSellerBudgetsValidateBeforeCall(authorization, updateSellerBudgets, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerBudgetMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSellerCampaign
     * @param sellerCampaignId  (required)
     * @param bid  (required)
     * @param authorization JWT Bearer Token (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateSellerCampaignCall(String sellerCampaignId, Double bid, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/seller-campaigns/{sellerCampaignId}"
            .replaceAll("\\{" + "sellerCampaignId" + "\\}", apiClient.escapeString(sellerCampaignId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (bid != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("bid", bid));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSellerCampaignValidateBeforeCall(String sellerCampaignId, Double bid, String authorization, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'sellerCampaignId' is set
        if (sellerCampaignId == null) {
            throw new ApiException("Missing the required parameter 'sellerCampaignId' when calling updateSellerCampaign(Async)");
        }
        
        // verify the required parameter 'bid' is set
        if (bid == null) {
            throw new ApiException("Missing the required parameter 'bid' when calling updateSellerCampaign(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateSellerCampaign(Async)");
        }
        

        okhttp3.Call call = updateSellerCampaignCall(sellerCampaignId, bid, authorization, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param sellerCampaignId  (required)
     * @param bid  (required)
     * @param authorization JWT Bearer Token (required)
     * @return SellerCampaignMessage
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SellerCampaignMessage updateSellerCampaign(String sellerCampaignId, Double bid, String authorization) throws ApiException {
        ApiResponse<SellerCampaignMessage> resp = updateSellerCampaignWithHttpInfo(sellerCampaignId, bid, authorization);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param sellerCampaignId  (required)
     * @param bid  (required)
     * @param authorization JWT Bearer Token (required)
     * @return ApiResponse&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SellerCampaignMessage> updateSellerCampaignWithHttpInfo(String sellerCampaignId, Double bid, String authorization) throws ApiException {
        okhttp3.Call call = updateSellerCampaignValidateBeforeCall(sellerCampaignId, bid, authorization, null, null);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param sellerCampaignId  (required)
     * @param bid  (required)
     * @param authorization JWT Bearer Token (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateSellerCampaignAsync(String sellerCampaignId, Double bid, String authorization, final ApiCallback<SellerCampaignMessage> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateSellerCampaignValidateBeforeCall(sellerCampaignId, bid, authorization, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SellerCampaignMessage>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for updateSellerCampaigns
     * @param authorization JWT Bearer Token (required)
     * @param campaignMessages  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call updateSellerCampaignsCall(String authorization, List<SellerCampaignBase> campaignMessages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = campaignMessages;

        // create path and map variables
        String localVarPath = "/v2/crp/seller-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateSellerCampaignsValidateBeforeCall(String authorization, List<SellerCampaignBase> campaignMessages, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateSellerCampaigns(Async)");
        }
        
        // verify the required parameter 'campaignMessages' is set
        if (campaignMessages == null) {
            throw new ApiException("Missing the required parameter 'campaignMessages' when calling updateSellerCampaigns(Async)");
        }
        

        okhttp3.Call call = updateSellerCampaignsCall(authorization, campaignMessages, progressListener, progressRequestListener);
        return call;

    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param campaignMessages  (required)
     * @return List&lt;SellerCampaignMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SellerCampaignMessage> updateSellerCampaigns(String authorization, List<SellerCampaignBase> campaignMessages) throws ApiException {
        ApiResponse<List<SellerCampaignMessage>> resp = updateSellerCampaignsWithHttpInfo(authorization, campaignMessages);
        return resp.getData();
    }

    /**
     * 
     * 
     * @param authorization JWT Bearer Token (required)
     * @param campaignMessages  (required)
     * @return ApiResponse&lt;List&lt;SellerCampaignMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SellerCampaignMessage>> updateSellerCampaignsWithHttpInfo(String authorization, List<SellerCampaignBase> campaignMessages) throws ApiException {
        okhttp3.Call call = updateSellerCampaignsValidateBeforeCall(authorization, campaignMessages, null, null);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param authorization JWT Bearer Token (required)
     * @param campaignMessages  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call updateSellerCampaignsAsync(String authorization, List<SellerCampaignBase> campaignMessages, final ApiCallback<List<SellerCampaignMessage>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = updateSellerCampaignsValidateBeforeCall(authorization, campaignMessages, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SellerCampaignMessage>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
