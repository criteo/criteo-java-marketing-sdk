/*
 * Marketing API v.1.0
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * The version of the OpenAPI document: v.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.marketing.api;

import com.criteo.marketing.ApiCallback;
import com.criteo.marketing.ApiClient;
import com.criteo.marketing.ApiException;
import com.criteo.marketing.ApiResponse;
import com.criteo.marketing.Configuration;
import com.criteo.marketing.Pair;
import com.criteo.marketing.ProgressRequestBody;
import com.criteo.marketing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.marketing.model.AudienceCreateRequest;
import com.criteo.marketing.model.AudienceCreateResponse;
import com.criteo.marketing.model.AudiencePatchRequest;
import com.criteo.marketing.model.AudiencePatchResponse;
import com.criteo.marketing.model.AudiencePutRequest;
import com.criteo.marketing.model.AudiencesGetResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AudiencesApi {
    private ApiClient localVarApiClient;

    public AudiencesApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AudiencesApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for addRemoveUsersToAudience
     * @param audienceId Mandatory. The id of the audience to add or remove users to. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to create the Audience. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users were Added/Removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Operation, Schema, no valid identifiers given, too many identifiers given in a single request or invalid use of Gum caller id field. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveUsersToAudienceCall(Integer audienceId, String authorization, AudiencePatchRequest request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/audiences/userlist/{audienceId}"
            .replaceAll("\\{" + "audienceId" + "\\}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addRemoveUsersToAudienceValidateBeforeCall(Integer audienceId, String authorization, AudiencePatchRequest request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling addRemoveUsersToAudience(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling addRemoveUsersToAudience(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling addRemoveUsersToAudience(Async)");
        }
        

        okhttp3.Call localVarCall = addRemoveUsersToAudienceCall(audienceId, authorization, request, _callback);
        return localVarCall;

    }

    /**
     * Add/Remove users to an Audience.
     * Add/Remove users to an Audience.
     * @param audienceId Mandatory. The id of the audience to add or remove users to. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to create the Audience. (required)
     * @return AudiencePatchResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users were Added/Removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Operation, Schema, no valid identifiers given, too many identifiers given in a single request or invalid use of Gum caller id field. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public AudiencePatchResponse addRemoveUsersToAudience(Integer audienceId, String authorization, AudiencePatchRequest request) throws ApiException {
        ApiResponse<AudiencePatchResponse> localVarResp = addRemoveUsersToAudienceWithHttpInfo(audienceId, authorization, request);
        return localVarResp.getData();
    }

    /**
     * Add/Remove users to an Audience.
     * Add/Remove users to an Audience.
     * @param audienceId Mandatory. The id of the audience to add or remove users to. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to create the Audience. (required)
     * @return ApiResponse&lt;AudiencePatchResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users were Added/Removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Operation, Schema, no valid identifiers given, too many identifiers given in a single request or invalid use of Gum caller id field. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudiencePatchResponse> addRemoveUsersToAudienceWithHttpInfo(Integer audienceId, String authorization, AudiencePatchRequest request) throws ApiException {
        okhttp3.Call localVarCall = addRemoveUsersToAudienceValidateBeforeCall(audienceId, authorization, request, null);
        Type localVarReturnType = new TypeToken<AudiencePatchResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Add/Remove users to an Audience. (asynchronously)
     * Add/Remove users to an Audience.
     * @param audienceId Mandatory. The id of the audience to add or remove users to. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to create the Audience. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Users were Added/Removed successfully. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Invalid Operation, Schema, no valid identifiers given, too many identifiers given in a single request or invalid use of Gum caller id field. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call addRemoveUsersToAudienceAsync(Integer audienceId, String authorization, AudiencePatchRequest request, final ApiCallback<AudiencePatchResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addRemoveUsersToAudienceValidateBeforeCall(audienceId, authorization, request, _callback);
        Type localVarReturnType = new TypeToken<AudiencePatchResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createAudience
     * @param authorization JWT Bearer Token (required)
     * @param createRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created Audience. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAudienceCall(String authorization, AudienceCreateRequest createRequest, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = createRequest;

        // create path and map variables
        String localVarPath = "/v1/audiences/userlist";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createAudienceValidateBeforeCall(String authorization, AudienceCreateRequest createRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling createAudience(Async)");
        }
        
        // verify the required parameter 'createRequest' is set
        if (createRequest == null) {
            throw new ApiException("Missing the required parameter 'createRequest' when calling createAudience(Async)");
        }
        

        okhttp3.Call localVarCall = createAudienceCall(authorization, createRequest, _callback);
        return localVarCall;

    }

    /**
     * Create a new Audience.
     * Create a new Audience for the given Advertiser.
     * @param authorization JWT Bearer Token (required)
     * @param createRequest  (required)
     * @return AudienceCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created Audience. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public AudienceCreateResponse createAudience(String authorization, AudienceCreateRequest createRequest) throws ApiException {
        ApiResponse<AudienceCreateResponse> localVarResp = createAudienceWithHttpInfo(authorization, createRequest);
        return localVarResp.getData();
    }

    /**
     * Create a new Audience.
     * Create a new Audience for the given Advertiser.
     * @param authorization JWT Bearer Token (required)
     * @param createRequest  (required)
     * @return ApiResponse&lt;AudienceCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created Audience. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudienceCreateResponse> createAudienceWithHttpInfo(String authorization, AudienceCreateRequest createRequest) throws ApiException {
        okhttp3.Call localVarCall = createAudienceValidateBeforeCall(authorization, createRequest, null);
        Type localVarReturnType = new TypeToken<AudienceCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create a new Audience. (asynchronously)
     * Create a new Audience for the given Advertiser.
     * @param authorization JWT Bearer Token (required)
     * @param createRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Newly created Audience. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createAudienceAsync(String authorization, AudienceCreateRequest createRequest, final ApiCallback<AudienceCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createAudienceValidateBeforeCall(authorization, createRequest, _callback);
        Type localVarReturnType = new TypeToken<AudienceCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for deleteAudience
     * @param audienceId Mandatory. The id of the audience to delete. (required)
     * @param authorization JWT Bearer Token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAudienceCall(Integer audienceId, String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/audiences/{audienceId}"
            .replaceAll("\\{" + "audienceId" + "\\}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteAudienceValidateBeforeCall(Integer audienceId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling deleteAudience(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling deleteAudience(Async)");
        }
        

        okhttp3.Call localVarCall = deleteAudienceCall(audienceId, authorization, _callback);
        return localVarCall;

    }

    /**
     * Delete an Audience.
     * Delete an Audience.
     * @param audienceId Mandatory. The id of the audience to delete. (required)
     * @param authorization JWT Bearer Token (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public Object deleteAudience(Integer audienceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = deleteAudienceWithHttpInfo(audienceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Delete an Audience.
     * Delete an Audience.
     * @param audienceId Mandatory. The id of the audience to delete. (required)
     * @param authorization JWT Bearer Token (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> deleteAudienceWithHttpInfo(Integer audienceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = deleteAudienceValidateBeforeCall(audienceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Delete an Audience. (asynchronously)
     * Delete an Audience.
     * @param audienceId Mandatory. The id of the audience to delete. (required)
     * @param authorization JWT Bearer Token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was deleted. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call deleteAudienceAsync(Integer audienceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteAudienceValidateBeforeCall(audienceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for getAudiences
     * @param authorization JWT Bearer Token (required)
     * @param advertiserId Mandatory. Advertiser to get all Audiences for. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Audiences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudiencesCall(String authorization, Integer advertiserId, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/audiences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (advertiserId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserId", advertiserId));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAudiencesValidateBeforeCall(String authorization, Integer advertiserId, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling getAudiences(Async)");
        }
        

        okhttp3.Call localVarCall = getAudiencesCall(authorization, advertiserId, _callback);
        return localVarCall;

    }

    /**
     * Get the list of Audiences.
     * Get the list of Audiences for the given Advertiser.
     * @param authorization JWT Bearer Token (required)
     * @param advertiserId Mandatory. Advertiser to get all Audiences for. (optional)
     * @return AudiencesGetResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Audiences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public AudiencesGetResponse getAudiences(String authorization, Integer advertiserId) throws ApiException {
        ApiResponse<AudiencesGetResponse> localVarResp = getAudiencesWithHttpInfo(authorization, advertiserId);
        return localVarResp.getData();
    }

    /**
     * Get the list of Audiences.
     * Get the list of Audiences for the given Advertiser.
     * @param authorization JWT Bearer Token (required)
     * @param advertiserId Mandatory. Advertiser to get all Audiences for. (optional)
     * @return ApiResponse&lt;AudiencesGetResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Audiences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AudiencesGetResponse> getAudiencesWithHttpInfo(String authorization, Integer advertiserId) throws ApiException {
        okhttp3.Call localVarCall = getAudiencesValidateBeforeCall(authorization, advertiserId, null);
        Type localVarReturnType = new TypeToken<AudiencesGetResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get the list of Audiences. (asynchronously)
     * Get the list of Audiences for the given Advertiser.
     * @param authorization JWT Bearer Token (required)
     * @param advertiserId Mandatory. Advertiser to get all Audiences for. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> List of Audiences. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The requested advertiser is missing from current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAudiencesAsync(String authorization, Integer advertiserId, final ApiCallback<AudiencesGetResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAudiencesValidateBeforeCall(authorization, advertiserId, _callback);
        Type localVarReturnType = new TypeToken<AudiencesGetResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for removeUsersFromAudience
     * @param audienceId Mandatory. The id of the audience to empty. (required)
     * @param authorization JWT Bearer Token (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was emptied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUsersFromAudienceCall(Integer audienceId, String authorization, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/audiences/userlist/{audienceId}/users"
            .replaceAll("\\{" + "audienceId" + "\\}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call removeUsersFromAudienceValidateBeforeCall(Integer audienceId, String authorization, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling removeUsersFromAudience(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling removeUsersFromAudience(Async)");
        }
        

        okhttp3.Call localVarCall = removeUsersFromAudienceCall(audienceId, authorization, _callback);
        return localVarCall;

    }

    /**
     * Remove all users from an Audience.
     * Remove all users from an Audience.
     * @param audienceId Mandatory. The id of the audience to empty. (required)
     * @param authorization JWT Bearer Token (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was emptied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public Object removeUsersFromAudience(Integer audienceId, String authorization) throws ApiException {
        ApiResponse<Object> localVarResp = removeUsersFromAudienceWithHttpInfo(audienceId, authorization);
        return localVarResp.getData();
    }

    /**
     * Remove all users from an Audience.
     * Remove all users from an Audience.
     * @param audienceId Mandatory. The id of the audience to empty. (required)
     * @param authorization JWT Bearer Token (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was emptied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> removeUsersFromAudienceWithHttpInfo(Integer audienceId, String authorization) throws ApiException {
        okhttp3.Call localVarCall = removeUsersFromAudienceValidateBeforeCall(audienceId, authorization, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Remove all users from an Audience. (asynchronously)
     * Remove all users from an Audience.
     * @param audienceId Mandatory. The id of the audience to empty. (required)
     * @param authorization JWT Bearer Token (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience was emptied. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call removeUsersFromAudienceAsync(Integer audienceId, String authorization, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = removeUsersFromAudienceValidateBeforeCall(audienceId, authorization, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for updateAudienceMetadata
     * @param audienceId Mandatory. The id of the Audience to update. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to update the Audience metadata. (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience metadata was successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAudienceMetadataCall(Integer audienceId, String authorization, AudiencePutRequest request, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = request;

        // create path and map variables
        String localVarPath = "/v1/audiences/{audienceId}"
            .replaceAll("\\{" + "audienceId" + "\\}", localVarApiClient.escapeString(audienceId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json", "text/json", "application/xml", "text/xml", "application/x-www-form-urlencoded", "text/html"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateAudienceMetadataValidateBeforeCall(Integer audienceId, String authorization, AudiencePutRequest request, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'audienceId' is set
        if (audienceId == null) {
            throw new ApiException("Missing the required parameter 'audienceId' when calling updateAudienceMetadata(Async)");
        }
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling updateAudienceMetadata(Async)");
        }
        
        // verify the required parameter 'request' is set
        if (request == null) {
            throw new ApiException("Missing the required parameter 'request' when calling updateAudienceMetadata(Async)");
        }
        

        okhttp3.Call localVarCall = updateAudienceMetadataCall(audienceId, authorization, request, _callback);
        return localVarCall;

    }

    /**
     * Update an Audience metadata.
     * Update an Audience metadata.
     * @param audienceId Mandatory. The id of the Audience to update. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to update the Audience metadata. (required)
     * @return Object
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience metadata was successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public Object updateAudienceMetadata(Integer audienceId, String authorization, AudiencePutRequest request) throws ApiException {
        ApiResponse<Object> localVarResp = updateAudienceMetadataWithHttpInfo(audienceId, authorization, request);
        return localVarResp.getData();
    }

    /**
     * Update an Audience metadata.
     * Update an Audience metadata.
     * @param audienceId Mandatory. The id of the Audience to update. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to update the Audience metadata. (required)
     * @return ApiResponse&lt;Object&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience metadata was successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Object> updateAudienceMetadataWithHttpInfo(Integer audienceId, String authorization, AudiencePutRequest request) throws ApiException {
        okhttp3.Call localVarCall = updateAudienceMetadataValidateBeforeCall(audienceId, authorization, request, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Update an Audience metadata. (asynchronously)
     * Update an Audience metadata.
     * @param audienceId Mandatory. The id of the Audience to update. (required)
     * @param authorization JWT Bearer Token (required)
     * @param request Mandatory. The request to update the Audience metadata. (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 204 </td><td> Audience metadata was successfully changed. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> The Audience name is incorrect. Must not be empty. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> The Advertiser this Audience belongs to is not in current user&#39;s portfolio. </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Audience not found. </td><td>  -  </td></tr>
        <tr><td> 409 </td><td> The Audience name is already used for this Advertiser. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call updateAudienceMetadataAsync(Integer audienceId, String authorization, AudiencePutRequest request, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateAudienceMetadataValidateBeforeCall(audienceId, authorization, request, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
