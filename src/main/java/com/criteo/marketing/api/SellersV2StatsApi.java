/*
 * Marketing API v.1.0
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * OpenAPI spec version: v.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.marketing.api;

import com.criteo.marketing.ApiCallback;
import com.criteo.marketing.ApiClient;
import com.criteo.marketing.ApiException;
import com.criteo.marketing.ApiResponse;
import com.criteo.marketing.Configuration;
import com.criteo.marketing.Pair;
import com.criteo.marketing.ProgressRequestBody;
import com.criteo.marketing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SellersV2StatsApi {
    private ApiClient apiClient;

    public SellersV2StatsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SellersV2StatsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for campaigns
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call campaignsCall(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/stats/campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (intervalSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("intervalSize", intervalSize));
        }

        if (clickAttributionPolicy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("clickAttributionPolicy", clickAttributionPolicy));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        }

        if (count != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call campaignsValidateBeforeCall(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling campaigns(Async)");
        }
        

        okhttp3.Call call = campaignsCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get stats by campaign.
     * ## Dimensions                Get performance statistics aggregated for _campaigns_. The campaign id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] campaigns(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count) throws ApiException {
        ApiResponse<byte[]> resp = campaignsWithHttpInfo(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count);
        return resp.getData();
    }

    /**
     * Get stats by campaign.
     * ## Dimensions                Get performance statistics aggregated for _campaigns_. The campaign id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> campaignsWithHttpInfo(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count) throws ApiException {
        okhttp3.Call call = campaignsValidateBeforeCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get stats by campaign. (asynchronously)
     * ## Dimensions                Get performance statistics aggregated for _campaigns_. The campaign id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call campaignsAsync(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = campaignsValidateBeforeCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sellerCampaigns
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call sellerCampaignsCall(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/stats/seller-campaigns";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (intervalSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("intervalSize", intervalSize));
        }

        if (clickAttributionPolicy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("clickAttributionPolicy", clickAttributionPolicy));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        }

        if (count != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sellerCampaignsValidateBeforeCall(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling sellerCampaigns(Async)");
        }
        

        okhttp3.Call call = sellerCampaignsCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get stats by seller-campaign.
     * ## Dimensions                Get performance statistics aggregated for _seller campaigns_.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] sellerCampaigns(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count) throws ApiException {
        ApiResponse<byte[]> resp = sellerCampaignsWithHttpInfo(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count);
        return resp.getData();
    }

    /**
     * Get stats by seller-campaign.
     * ## Dimensions                Get performance statistics aggregated for _seller campaigns_.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> sellerCampaignsWithHttpInfo(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count) throws ApiException {
        okhttp3.Call call = sellerCampaignsValidateBeforeCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get stats by seller-campaign. (asynchronously)
     * ## Dimensions                Get performance statistics aggregated for _seller campaigns_.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call sellerCampaignsAsync(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = sellerCampaignsValidateBeforeCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for sellers
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call sellersCall(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/v2/crp/stats/sellers";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (intervalSize != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("intervalSize", intervalSize));
        }

        if (clickAttributionPolicy != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("clickAttributionPolicy", clickAttributionPolicy));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("startDate", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("endDate", endDate));
        }

        if (count != null) {
            localVarQueryParams.addAll(apiClient.parameterToPair("count", count));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", apiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] { "Authorization" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call sellersValidateBeforeCall(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling sellers(Async)");
        }
        

        okhttp3.Call call = sellersCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get stats by seller.
     * ## Dimensions                Get performance statistics aggregated for _sellers_. The seller id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @return byte[]
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public byte[] sellers(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count) throws ApiException {
        ApiResponse<byte[]> resp = sellersWithHttpInfo(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count);
        return resp.getData();
    }

    /**
     * Get stats by seller.
     * ## Dimensions                Get performance statistics aggregated for _sellers_. The seller id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @return ApiResponse&lt;byte[]&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<byte[]> sellersWithHttpInfo(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count) throws ApiException {
        okhttp3.Call call = sellersValidateBeforeCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, null, null);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get stats by seller. (asynchronously)
     * ## Dimensions                Get performance statistics aggregated for _sellers_. The seller id appears  in the output as the first column.                Aggregation can be done by &#x60;hour&#x60;, &#x60;day&#x60;, &#x60;month&#x60;, or &#x60;year&#x60;. The aggregation  interval size is controlled by &#x60;intervalSize&#x60;. The time interval appears in  the output as the second column.                ## Metrics                The metrics reported by this endpoint are                .  | Metric Group | Description  ---|--------------|------------  A | impressions | Number of times product is shown in a banner  B | clicks | Number of clicks on product  C | cost | Amount spent for clicks on products  D | saleUnits | Number of products sold attributed to clicks  E | revenue | Revenue generated by sales  F | CR &#x3D; Conversion Rate | salesUnits / clicks  G | CPO &#x3D; Cost Per Order | cost / salesUnits  H | COS &#x3D; Cost of Sale | cost / revenue  I | ROAS &#x3D; Return On Add Spend | revenue / cost                The last six metrics can be computed in two ways depending on the policy to count only  the sales that result from clicks on the same sellers product in a banner  (same-seller) or not (any-seller).  Reporting can be controlled by &#x60;clickAttributionPolicy&#x60;.                The 9 (or 15) metric values appear in the output as the final 9 (or 15) columns.                ## Filtering                The results can be filtered by date or count.                Filtering the results to events  that happened in a time interval is done by setting the &#x60;startDate&#x60; and  &#x60;endDate&#x60; filter parameters using the &#x60;yyyy-MM-DD&#x60; format. The start date  includes all events timestamped since the beginning of that day while the end  date includes events until the end of day. The maximum duration of the date  range is 1 year. If the aggregation interval is &#x60;hour&#x60;, then the maximum  duration of the date range is 1 month. Note that month and year aggregate values  may contain partial data for the interval if filtering by date.                Filtering the results to a maximum number of data rows is done by setting the  &#x60;count&#x60; filter parameter. When combined with startDate this can be used to perform  simple pagination.                ## Response Format                The representation format can be specified by MIME values in the Accept header.  For now the only supported values for the accept header is &#x60;application/json&#x60; and  &#x60;text/csv&#x60;.                &#x60;&#x60;&#x60;json  {  \&quot;columns\&quot;:[\&quot;campaignId\&quot;, \&quot;sellerId\&quot;, \&quot;interval\&quot;, \&quot;impressions\&quot;, \&quot;clicks\&quot;, \&quot;cost\&quot;, \&quot;salesUnits\&quot;, \&quot;revenue\&quot;, …],  \&quot;data\&quot;:  [[\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-01\&quot;,  2345,          128,      64.23,  9,            287.32,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-02\&quot;,  1129,          98,       44.93,  6,            171.80,    …],            [\&quot;2099873\&quot;,    \&quot;321224\&quot;,   \&quot;2018-03\&quot;,  3476,          322,      15.27,  18,           587.37,    …],            …           ],  \&quot;rows\&quot;:  1600  }  &#x60;&#x60;&#x60;                The JSON result is an object with three fields (&#x60;columns&#x60;, &#x60;data&#x60;, and &#x60;rows&#x60;). The  “columns” array acts as the header for the data rows. The categorical dimension  columns come first and will vary with the endpoint used (campaignId and/or  sellerId and interval). The interval column comes next. The interval size is  determined by the intervalSize parameter. This is followed by either nine or  fifteen metrics columns. The first three metrics (impressions, clicks, and cost)  always appear. The remaining depend on the clickAttributionPolicy parameter.                The “data” array contains data rows whose values match the entries in the  “columns” array. The dimensions are always strings. The metrics are JSON objects  whose type is number. Some of these are natural numbers (e.g. clicks and  impressions) whereas others are decimal values. As mentioned earlier the  currency is assumed to be the local currency established by the advertiser.                The “row” value is a count of the number of rows in the data array, and can be  used to check the integrity of the data.                Further information on the campaign or seller (e.g. the seller name) can be  obtained from the existing V1 or V2 endpoints using the campaign and/or seller  ID values.
     * @param authorization JWT Bearer Token (required)
     * @param intervalSize Specify the aggregation interval for events used to compute stats (default is \&quot;day\&quot;) (optional)
     * @param clickAttributionPolicy Specify the click attribution policy for salesUnits, revenue, CR, CPO, COS, and ROAS (optional)
     * @param startDate Filter out all events that occur before date (default is the value of &#x60;endDate&#x60;) (optional)
     * @param endDate Filter out all events that occur after date (default is today’s date) (optional)
     * @param count Return up to the first count rows of data (default is to return all rows available) (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call sellersAsync(String authorization, String intervalSize, String clickAttributionPolicy, OffsetDateTime startDate, OffsetDateTime endDate, Integer count, final ApiCallback<byte[]> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = sellersValidateBeforeCall(authorization, intervalSize, clickAttributionPolicy, startDate, endDate, count, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<byte[]>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
