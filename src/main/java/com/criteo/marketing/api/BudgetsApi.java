/*
 * Marketing API v.1.0
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * The version of the OpenAPI document: v.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.marketing.api;

import com.criteo.marketing.ApiCallback;
import com.criteo.marketing.ApiClient;
import com.criteo.marketing.ApiException;
import com.criteo.marketing.ApiResponse;
import com.criteo.marketing.Configuration;
import com.criteo.marketing.Pair;
import com.criteo.marketing.ProgressRequestBody;
import com.criteo.marketing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.marketing.model.BudgetMessage;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class BudgetsApi {
    private ApiClient localVarApiClient;

    public BudgetsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public BudgetsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for get
     * @param authorization JWT Bearer Token (required)
     * @param advertiserIds Optional. One or more advertiser ids, E.g. 78, 12932, 45236. If the requested advertiser ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param budgetIds Optional. One or more budget ids, E.g. 75, 1931, 532. If the requested budget ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param onlyActiveCampaigns Optional. Filters by campaign status, allowing to only display active campaigns or not. Default value is true. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Budgets returned OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No advertiser was specified and user does not have a portfolio. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getCall(String authorization, String advertiserIds, String budgetIds, Boolean onlyActiveCampaigns, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/v1/budgets";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (advertiserIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("advertiserIds", advertiserIds));
        }

        if (budgetIds != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("budgetIds", budgetIds));
        }

        if (onlyActiveCampaigns != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("onlyActiveCampaigns", onlyActiveCampaigns));
        }

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (authorization != null) {
            localVarHeaderParams.put("Authorization", localVarApiClient.parameterToString(authorization));
        }

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        final String[] localVarAccepts = {
            "application/json", "text/json", "application/xml", "text/xml", "text/html"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] { "Authorization" };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String authorization, String advertiserIds, String budgetIds, Boolean onlyActiveCampaigns, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'authorization' is set
        if (authorization == null) {
            throw new ApiException("Missing the required parameter 'authorization' when calling get(Async)");
        }
        

        okhttp3.Call localVarCall = getCall(authorization, advertiserIds, budgetIds, onlyActiveCampaigns, _callback);
        return localVarCall;

    }

    /**
     * Gets budgets
     * Get the list of budgets with the specified filters.  If an advertiser or a budget is requested but is missing from current user&#39;s portfolio, it will not be included in the list.  If neither budgets ids nor advertisers ids are provided, then the user&#39;s portfolio will be used.
     * @param authorization JWT Bearer Token (required)
     * @param advertiserIds Optional. One or more advertiser ids, E.g. 78, 12932, 45236. If the requested advertiser ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param budgetIds Optional. One or more budget ids, E.g. 75, 1931, 532. If the requested budget ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param onlyActiveCampaigns Optional. Filters by campaign status, allowing to only display active campaigns or not. Default value is true. (optional)
     * @return List&lt;BudgetMessage&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Budgets returned OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No advertiser was specified and user does not have a portfolio. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public List<BudgetMessage> get(String authorization, String advertiserIds, String budgetIds, Boolean onlyActiveCampaigns) throws ApiException {
        ApiResponse<List<BudgetMessage>> localVarResp = getWithHttpInfo(authorization, advertiserIds, budgetIds, onlyActiveCampaigns);
        return localVarResp.getData();
    }

    /**
     * Gets budgets
     * Get the list of budgets with the specified filters.  If an advertiser or a budget is requested but is missing from current user&#39;s portfolio, it will not be included in the list.  If neither budgets ids nor advertisers ids are provided, then the user&#39;s portfolio will be used.
     * @param authorization JWT Bearer Token (required)
     * @param advertiserIds Optional. One or more advertiser ids, E.g. 78, 12932, 45236. If the requested advertiser ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param budgetIds Optional. One or more budget ids, E.g. 75, 1931, 532. If the requested budget ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param onlyActiveCampaigns Optional. Filters by campaign status, allowing to only display active campaigns or not. Default value is true. (optional)
     * @return ApiResponse&lt;List&lt;BudgetMessage&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Budgets returned OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No advertiser was specified and user does not have a portfolio. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<List<BudgetMessage>> getWithHttpInfo(String authorization, String advertiserIds, String budgetIds, Boolean onlyActiveCampaigns) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(authorization, advertiserIds, budgetIds, onlyActiveCampaigns, null);
        Type localVarReturnType = new TypeToken<List<BudgetMessage>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Gets budgets (asynchronously)
     * Get the list of budgets with the specified filters.  If an advertiser or a budget is requested but is missing from current user&#39;s portfolio, it will not be included in the list.  If neither budgets ids nor advertisers ids are provided, then the user&#39;s portfolio will be used.
     * @param authorization JWT Bearer Token (required)
     * @param advertiserIds Optional. One or more advertiser ids, E.g. 78, 12932, 45236. If the requested advertiser ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param budgetIds Optional. One or more budget ids, E.g. 75, 1931, 532. If the requested budget ids are not part of the user&#39;s portfolio, they will be skipped. (optional)
     * @param onlyActiveCampaigns Optional. Filters by campaign status, allowing to only display active campaigns or not. Default value is true. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Budgets returned OK. </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> No advertiser was specified and user does not have a portfolio. </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication failed. </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Throttling failure. Maximum sending rate exceeded. </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Unknown error. </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call getAsync(String authorization, String advertiserIds, String budgetIds, Boolean onlyActiveCampaigns, final ApiCallback<List<BudgetMessage>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(authorization, advertiserIds, budgetIds, onlyActiveCampaigns, _callback);
        Type localVarReturnType = new TypeToken<List<BudgetMessage>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
