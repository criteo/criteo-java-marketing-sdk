/*
 * Marketing API v.1.0
 * IMPORTANT: This swagger links to Criteo production environment. Any test applied here will thus impact real campaigns.
 *
 * OpenAPI spec version: v.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.criteo.marketing.api;

import com.criteo.marketing.ApiCallback;
import com.criteo.marketing.ApiClient;
import com.criteo.marketing.ApiException;
import com.criteo.marketing.ApiResponse;
import com.criteo.marketing.Configuration;
import com.criteo.marketing.Pair;
import com.criteo.marketing.ProgressRequestBody;
import com.criteo.marketing.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.criteo.marketing.model.InlineResponse200;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AuthenticationApi {
    private ApiClient apiClient;

    public AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public AuthenticationApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for oAuth2TokenPost
     * @param clientId API Client-Id or Username (optional)
     * @param clientSecret API Client secret or password (optional)
     * @param grantType Other grant types are not available (optional, default to &quot;client_credentials&quot;)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public okhttp3.Call oAuth2TokenPostCall(String clientId, String clientSecret, String grantType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = new Object();

        // create path and map variables
        String localVarPath = "/oauth2/token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();
        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if (progressListener != null) {
            apiClient.setHttpClient(apiClient.getHttpClient().newBuilder().addNetworkInterceptor(new okhttp3.Interceptor() {
                @Override
                public okhttp3.Response intercept(okhttp3.Interceptor.Chain chain) throws IOException {
                    okhttp3.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                            .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                            .build();
                }
            }).build());
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call oAuth2TokenPostValidateBeforeCall(String clientId, String clientSecret, String grantType, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        okhttp3.Call call = oAuth2TokenPostCall(clientId, clientSecret, grantType, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Authenticates provided credentials and returns an access token
     * Get the token necessary to perform any action through our API. You can create your API User in our Criteo platform &lt;a href&#x3D;&#39;https://marketing.criteo.com&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;. If you forgot your credentials (client_id and/or client_secret) you will need to reset them there.
     * @param clientId API Client-Id or Username (optional)
     * @param clientSecret API Client secret or password (optional)
     * @param grantType Other grant types are not available (optional, default to &quot;client_credentials&quot;)
     * @return InlineResponse200
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public InlineResponse200 oAuth2TokenPost(String clientId, String clientSecret, String grantType) throws ApiException {
        ApiResponse<InlineResponse200> resp = oAuth2TokenPostWithHttpInfo(clientId, clientSecret, grantType);
        return resp.getData();
    }

    /**
     * Authenticates provided credentials and returns an access token
     * Get the token necessary to perform any action through our API. You can create your API User in our Criteo platform &lt;a href&#x3D;&#39;https://marketing.criteo.com&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;. If you forgot your credentials (client_id and/or client_secret) you will need to reset them there.
     * @param clientId API Client-Id or Username (optional)
     * @param clientSecret API Client secret or password (optional)
     * @param grantType Other grant types are not available (optional, default to &quot;client_credentials&quot;)
     * @return ApiResponse&lt;InlineResponse200&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<InlineResponse200> oAuth2TokenPostWithHttpInfo(String clientId, String clientSecret, String grantType) throws ApiException {
        okhttp3.Call call = oAuth2TokenPostValidateBeforeCall(clientId, clientSecret, grantType, null, null);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Authenticates provided credentials and returns an access token (asynchronously)
     * Get the token necessary to perform any action through our API. You can create your API User in our Criteo platform &lt;a href&#x3D;&#39;https://marketing.criteo.com&#39; target&#x3D;&#39;_blank&#39;&gt;here&lt;/a&gt;. If you forgot your credentials (client_id and/or client_secret) you will need to reset them there.
     * @param clientId API Client-Id or Username (optional)
     * @param clientSecret API Client secret or password (optional)
     * @param grantType Other grant types are not available (optional, default to &quot;client_credentials&quot;)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public okhttp3.Call oAuth2TokenPostAsync(String clientId, String clientSecret, String grantType, final ApiCallback<InlineResponse200> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        okhttp3.Call call = oAuth2TokenPostValidateBeforeCall(clientId, clientSecret, grantType, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<InlineResponse200>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
